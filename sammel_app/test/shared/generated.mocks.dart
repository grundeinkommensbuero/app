// Mocks generated by Mockito 5.0.1 from annotations
// in sammel_app/test/shared/generated.dart.
// Do not manually edit this file.

import 'dart:_http' as _i17;
import 'dart:async' as _i15;
import 'dart:io' as _i24;

import 'package:easy_localization/src/translations.dart' as _i37;
import 'package:firebase_core/firebase_core.dart' as _i19;
import 'package:firebase_messaging/firebase_messaging.dart' as _i35;
import 'package:firebase_messaging_platform_interface/src/notification_settings.dart'
    as _i21;
import 'package:firebase_messaging_platform_interface/src/remote_message.dart'
    as _i20;
import 'package:flutter/src/widgets/framework.dart' as _i1;
import 'package:http_server/src/http_body.dart' as _i8;
import 'package:latlong/latlong.dart' as _i34;
import 'package:mockito/mockito.dart' as _i2;
import 'package:sammel_app/model/ActionListPushData.dart' as _i36;
import 'package:sammel_app/model/ChatChannel.dart' as _i10;
import 'package:sammel_app/model/Evaluation.dart' as _i28;
import 'package:sammel_app/model/Health.dart' as _i22;
import 'package:sammel_app/model/Kiez.dart' as _i25;
import 'package:sammel_app/model/ListLocation.dart' as _i30;
import 'package:sammel_app/model/PushMessage.dart' as _i32;
import 'package:sammel_app/model/Termin.dart' as _i7;
import 'package:sammel_app/model/TermineFilter.dart' as _i11;
import 'package:sammel_app/model/User.dart' as _i12;
import 'package:sammel_app/routes/TermineSeite.dart' as _i27;
import 'package:sammel_app/services/BackendService.dart' as _i5;
import 'package:sammel_app/services/ChatMessageService.dart' as _i33;
import 'package:sammel_app/services/GeoService.dart' as _i18;
import 'package:sammel_app/services/ListLocationService.dart' as _i29;
import 'package:sammel_app/services/LocalNotificationService.dart' as _i3;
import 'package:sammel_app/services/PushNotificationManager.dart' as _i23;
import 'package:sammel_app/services/PushReceiveService.dart' as _i14;
import 'package:sammel_app/services/PushSendService.dart' as _i31;
import 'package:sammel_app/services/PushUpdateService.dart' as _i16;
import 'package:sammel_app/services/StammdatenService.dart' as _i4;
import 'package:sammel_app/services/StorageService.dart' as _i13;
import 'package:sammel_app/services/TermineService.dart' as _i26;
import 'package:sammel_app/services/UserService.dart' as _i6;
import 'package:shared_preferences/shared_preferences.dart' as _i9;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeGlobalKey<T extends _i1.State<_i1.StatefulWidget>> extends _i2.Fake
    implements _i1.GlobalKey<T> {}

class _FakeLocalNotificationService extends _i2.Fake
    implements _i3.LocalNotificationService {}

class _FakeStammdatenService extends _i2.Fake implements _i4.StammdatenService {
}

class _FakeBackend extends _i2.Fake implements _i5.Backend {}

class _FakeAbstractUserService extends _i2.Fake
    implements _i6.AbstractUserService {}

class _FakeTermin extends _i2.Fake implements _i7.Termin {}

class _FakeHttpClientResponseBody extends _i2.Fake
    implements _i8.HttpClientResponseBody {}

class _FakeSharedPreferences extends _i2.Fake implements _i9.SharedPreferences {
}

class _FakeChatChannel extends _i2.Fake implements _i10.ChatChannel {}

class _FakeTermineFilter extends _i2.Fake implements _i11.TermineFilter {}

class _FakeUser extends _i2.Fake implements _i12.User {}

class _FakeStorageService extends _i2.Fake implements _i13.StorageService {}

class _FakeFirebaseReceiveService extends _i2.Fake
    implements _i14.FirebaseReceiveService {}

class _FakeStreamController<T> extends _i2.Fake
    implements _i15.StreamController<T> {}

class _FakePushReceiveService extends _i2.Fake
    implements _i14.PushReceiveService {}

class _FakePushUpdateService extends _i2.Fake
    implements _i16.PushUpdateService {}

class _FakeHttpClient extends _i2.Fake implements _i17.HttpClient {}

class _FakeGeoData extends _i2.Fake implements _i18.GeoData {}

// wird irgendwie falsch generiert
class _FakeFirebaseApp extends _i2.Fake implements _i19.FirebaseApp {
  @override
  bool operator ==(dynamic other) => super == other;
}

class _FakeRemoteMessage extends _i2.Fake implements _i20.RemoteMessage {}

class _FakeNotificationSettings extends _i2.Fake
    implements _i21.NotificationSettings {}

class _FakeServerHealth extends _i2.Fake implements _i22.ServerHealth {}

class _FakeAbstractPushNotificationManager extends _i2.Fake
    implements _i23.AbstractPushNotificationManager {}

class _FakeHttpHeaders extends _i2.Fake implements _i17.HttpHeaders {}

class _FakeHttpClientResponse extends _i2.Fake
    implements _i17.HttpClientResponse {}

class _FakeSocket extends _i2.Fake implements _i24.Socket {}

/// A class which mocks [StammdatenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStammdatenService extends _i2.Mock implements _i4.StammdatenService {
  MockStammdatenService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.Future<Set<_i25.Kiez>> get kieze => (super.noSuchMethod(
      Invocation.getter(#kieze),
      returnValue: Future.value(<_i25.Kiez>{})) as _i15.Future<Set<_i25.Kiez>>);
  @override
  _i15.Future<Set<_i25.Region>> get regionen =>
      (super.noSuchMethod(Invocation.getter(#regionen),
              returnValue: Future.value(<_i25.Region>{}))
          as _i15.Future<Set<_i25.Region>>);
  @override
  _i15.Future<Set<_i25.Ortsteil>> get ortsteile =>
      (super.noSuchMethod(Invocation.getter(#ortsteile),
              returnValue: Future.value(<_i25.Ortsteil>{}))
          as _i15.Future<Set<_i25.Ortsteil>>);
}

/// A class which mocks [TermineService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTermineService extends _i2.Mock implements _i26.TermineService {
  MockTermineService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i27.TermineSeiteState> get actionPageKey =>
      (super.noSuchMethod(Invocation.getter(#actionPageKey),
              returnValue: _FakeGlobalKey<_i27.TermineSeiteState>())
          as _i1.GlobalKey<_i27.TermineSeiteState>);
  @override
  set actionPageKey(_i1.GlobalKey<_i27.TermineSeiteState>? _actionPageKey) =>
      super.noSuchMethod(Invocation.setter(#actionPageKey, _actionPageKey),
          returnValueForMissingStub: null);
  @override
  _i3.LocalNotificationService get localNotificationService =>
      (super.noSuchMethod(Invocation.getter(#localNotificationService),
              returnValue: _FakeLocalNotificationService())
          as _i3.LocalNotificationService);
  @override
  set localNotificationService(
          _i3.LocalNotificationService? _localNotificationService) =>
      super.noSuchMethod(
          Invocation.setter(
              #localNotificationService, _localNotificationService),
          returnValueForMissingStub: null);
  @override
  _i4.StammdatenService get stammdatenService =>
      (super.noSuchMethod(Invocation.getter(#stammdatenService),
          returnValue: _FakeStammdatenService()) as _i4.StammdatenService);
  @override
  set stammdatenService(_i4.StammdatenService? _stammdatenService) => super
      .noSuchMethod(Invocation.setter(#stammdatenService, _stammdatenService),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i15.Future<List<_i7.Termin>> loadActions(_i11.TermineFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#loadActions, [filter]),
              returnValue: Future.value(<_i7.Termin>[]))
          as _i15.Future<List<_i7.Termin>>);
  @override
  _i15.Future<_i7.Termin> createAction(_i7.Termin? termin, String? token) =>
      (super.noSuchMethod(Invocation.method(#createAction, [termin, token]),
          returnValue: Future.value(_FakeTermin())) as _i15.Future<_i7.Termin>);
  @override
  _i15.Future<_i7.Termin> getActionWithDetails(int? id) =>
      (super.noSuchMethod(Invocation.method(#getActionWithDetails, [id]),
          returnValue: Future.value(_FakeTermin())) as _i15.Future<_i7.Termin>);
  @override
  _i15.Future<void> saveAction(_i7.Termin? action, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveAction, [action, token]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  dynamic deleteAction(_i7.Termin? action, String? token) =>
      super.noSuchMethod(Invocation.method(#deleteAction, [action, token]));
  @override
  dynamic joinAction(int? id) =>
      super.noSuchMethod(Invocation.method(#joinAction, [id]));
  @override
  dynamic leaveAction(int? id) =>
      super.noSuchMethod(Invocation.method(#leaveAction, [id]));
  @override
  void handleNotificationTap(Map<String, dynamic>? data) =>
      super.noSuchMethod(Invocation.method(#handleNotificationTap, [data]),
          returnValueForMissingStub: null);
  @override
  void receiveMessage(Map<String, dynamic>? data) =>
      super.noSuchMethod(Invocation.method(#receiveMessage, [data]),
          returnValueForMissingStub: null);
  @override
  void updateMessages(List<Map<String, dynamic>>? data) =>
      super.noSuchMethod(Invocation.method(#updateMessages, [data]),
          returnValueForMissingStub: null);
  @override
  _i15.Future<void> saveEvaluation(_i28.Evaluation? evaluation) =>
      (super.noSuchMethod(Invocation.method(#saveEvaluation, [evaluation]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data],
                  {#parameters: parameters, #appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(String? url, String? data,
          {bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url, data], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [ListLocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListLocationService extends _i2.Mock
    implements _i29.ListLocationService {
  MockListLocationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i15.Future<List<_i30.ListLocation>> getActiveListLocations() =>
      (super.noSuchMethod(Invocation.method(#getActiveListLocations, []),
              returnValue: Future.value(<_i30.ListLocation>[]))
          as _i15.Future<List<_i30.ListLocation>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data],
                  {#parameters: parameters, #appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(String? url, String? data,
          {bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url, data], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i2.Mock implements _i13.StorageService {
  MockStorageService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i9.SharedPreferences> get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
              returnValue: Future.value(_FakeSharedPreferences()))
          as _i15.Future<_i9.SharedPreferences>);
  @override
  _i15.Future<bool> saveActionToken(int? id, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveActionToken, [id, token]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<bool> deleteActionToken(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteActionToken, [id]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<String?> loadActionToken(int? id) =>
      (super.noSuchMethod(Invocation.method(#loadActionToken, [id]),
          returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  _i15.Future<bool> saveChatChannel(_i10.ChatChannel? channel) =>
      (super.noSuchMethod(Invocation.method(#saveChatChannel, [channel]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<_i10.ChatChannel?> loadChatChannel(String? id) =>
      (super.noSuchMethod(Invocation.method(#loadChatChannel, [id]),
              returnValue: Future.value(_FakeChatChannel()))
          as _i15.Future<_i10.ChatChannel?>);
  @override
  dynamic markActionIdAsStored(int? id) =>
      super.noSuchMethod(Invocation.method(#markActionIdAsStored, [id]));
  @override
  dynamic unmarkActionIdAsStored(int? id) =>
      super.noSuchMethod(Invocation.method(#unmarkActionIdAsStored, [id]));
  @override
  dynamic markActionIdAsEvaluated(int? id) =>
      super.noSuchMethod(Invocation.method(#markActionIdAsEvaluated, [id]));
  @override
  _i15.Future<List<int>> loadAllStoredActionIds() =>
      (super.noSuchMethod(Invocation.method(#loadAllStoredActionIds, []),
          returnValue: Future.value(<int>[])) as _i15.Future<List<int>>);
  @override
  _i15.Future<List<int>> loadAllStoredEvaluations() =>
      (super.noSuchMethod(Invocation.method(#loadAllStoredEvaluations, []),
          returnValue: Future.value(<int>[])) as _i15.Future<List<int>>);
  @override
  _i15.Future<bool> saveFilter(_i11.TermineFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#saveFilter, [filter]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<_i11.TermineFilter?> loadFilter() =>
      (super.noSuchMethod(Invocation.method(#loadFilter, []),
              returnValue: Future.value(_FakeTermineFilter()))
          as _i15.Future<_i11.TermineFilter?>);
  @override
  _i15.Future<bool> saveUser(_i12.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<_i12.User?> loadUser() =>
      (super.noSuchMethod(Invocation.method(#loadUser, []),
          returnValue: Future.value(_FakeUser())) as _i15.Future<_i12.User?>);
  @override
  _i15.Future<String> loadSecret() =>
      (super.noSuchMethod(Invocation.method(#loadSecret, []),
          returnValue: Future.value('')) as _i15.Future<String>);
  @override
  _i15.Future<void> saveSecret(String? secret) =>
      (super.noSuchMethod(Invocation.method(#saveSecret, [secret]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> saveCostumPushToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#saveCostumPushToken, [token]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> markPullMode() =>
      (super.noSuchMethod(Invocation.method(#markPullMode, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<bool> isPullMode() =>
      (super.noSuchMethod(Invocation.method(#isPullMode, []),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<void> saveMyKiez(List<String>? kieze) =>
      (super.noSuchMethod(Invocation.method(#saveMyKiez, [kieze]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<List<String>> loadMyKiez() =>
      (super.noSuchMethod(Invocation.method(#loadMyKiez, []),
          returnValue: Future.value(<String>[])) as _i15.Future<List<String>>);
  @override
  _i15.Future<bool> saveNotificationInterval(String? interval) => (super
      .noSuchMethod(Invocation.method(#saveNotificationInterval, [interval]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<String?> loadNotificationInterval() =>
      (super.noSuchMethod(Invocation.method(#loadNotificationInterval, []),
          returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  _i15.Future<bool> saveContact(String? interval) =>
      (super.noSuchMethod(Invocation.method(#saveContact, [interval]),
          returnValue: Future.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<String?> loadContact() =>
      (super.noSuchMethod(Invocation.method(#loadContact, []),
          returnValue: Future.value('')) as _i15.Future<String?>);
}

/// A class which mocks [PushSendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushSendService extends _i2.Mock implements _i31.PushSendService {
  MockPushSendService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  dynamic pushToDevices(List<String>? recipients, _i32.PushData? data,
          _i32.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToDevices, [recipients, data, notification]));
  @override
  dynamic pushToAction(int? actionId, _i32.PushData? data,
          _i32.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToAction, [actionId, data, notification]));
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data],
                  {#parameters: parameters, #appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(String? url, String? data,
          {bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url, data], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i2.Mock implements _i6.UserService {
  MockUserService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.StorageService get storageService =>
      (super.noSuchMethod(Invocation.getter(#storageService),
          returnValue: _FakeStorageService()) as _i13.StorageService);
  @override
  set storageService(_i13.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  _i14.FirebaseReceiveService get firebase =>
      (super.noSuchMethod(Invocation.getter(#firebase),
              returnValue: _FakeFirebaseReceiveService())
          as _i14.FirebaseReceiveService);
  @override
  set firebase(_i14.FirebaseReceiveService? _firebase) =>
      super.noSuchMethod(Invocation.setter(#firebase, _firebase),
          returnValueForMissingStub: null);
  @override
  _i15.StreamController<_i12.User> get streamController =>
      (super.noSuchMethod(Invocation.getter(#streamController),
              returnValue: _FakeStreamController<_i12.User>())
          as _i15.StreamController<_i12.User>);
  @override
  _i15.Future<Map<String, String>> get userHeaders =>
      (super.noSuchMethod(Invocation.getter(#userHeaders),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  set userHeaders(_i15.Future<Map<String, String>>? _userHeaders) =>
      super.noSuchMethod(Invocation.setter(#userHeaders, _userHeaders),
          returnValueForMissingStub: null);
  @override
  _i15.Stream<_i12.User> get user =>
      (super.noSuchMethod(Invocation.getter(#user),
          returnValue: Stream<_i12.User>.empty()) as _i15.Stream<_i12.User>);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i15.Future<_i12.User> createNewUser() =>
      (super.noSuchMethod(Invocation.method(#createNewUser, []),
          returnValue: Future.value(_FakeUser())) as _i15.Future<_i12.User>);
  @override
  dynamic verifyUser(_i12.User? user) =>
      super.noSuchMethod(Invocation.method(#verifyUser, [user]));
  @override
  _i15.Future<String> generateSecret() =>
      (super.noSuchMethod(Invocation.method(#generateSecret, []),
          returnValue: Future.value('')) as _i15.Future<String>);
  @override
  dynamic updateUsername(String? name) =>
      super.noSuchMethod(Invocation.method(#updateUsername, [name]));
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data],
                  {#parameters: parameters, #appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(String? url, String? data,
          {bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url, data], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [ChatMessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMessageService extends _i2.Mock
    implements _i33.ChatMessageService {
  MockChatMessageService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  Map<String, _i10.ChatChannel> get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
              returnValue: <String, _i10.ChatChannel>{})
          as Map<String, _i10.ChatChannel>);
  @override
  set channels(Map<String, _i10.ChatChannel>? _channels) =>
      super.noSuchMethod(Invocation.setter(#channels, _channels),
          returnValueForMissingStub: null);
  @override
  void receiveMessage(Map<String, dynamic>? json) =>
      super.noSuchMethod(Invocation.method(#receiveMessage, [json]),
          returnValueForMissingStub: null);
  @override
  _i15.Future<_i10.ChatChannel> storeMessage(_i32.ChatPushData? pushData) =>
      (super.noSuchMethod(Invocation.method(#storeMessage, [pushData]),
              returnValue: Future.value(_FakeChatChannel()))
          as _i15.Future<_i10.ChatChannel>);
  @override
  _i15.Future<List<_i10.ChatChannel>> storeMessages(
          List<_i32.ChatPushData>? pushData) =>
      (super.noSuchMethod(Invocation.method(#storeMessages, [pushData]),
              returnValue: Future.value(<_i10.ChatChannel>[]))
          as _i15.Future<List<_i10.ChatChannel>>);
  @override
  _i15.Future<void> handleNotificationTap(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#handleNotificationTap, [data]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  void createOrRecreateChatPage(_i1.State<_i1.StatefulWidget>? cls,
          _i10.ChatChannel? channel, int? terminId) =>
      super.noSuchMethod(
          Invocation.method(
              #createOrRecreateChatPage, [cls, channel, terminId]),
          returnValueForMissingStub: null);
  @override
  void createOrRecreateTpoicPage(
          _i1.State<_i1.StatefulWidget>? cls, _i10.ChatChannel? channel) =>
      super.noSuchMethod(
          Invocation.method(#createOrRecreateTpoicPage, [cls, channel]),
          returnValueForMissingStub: null);
  @override
  _i15.Future<_i10.ChatChannel> getTopicChannel(String? topic) =>
      (super.noSuchMethod(Invocation.method(#getTopicChannel, [topic]),
              returnValue: Future.value(_FakeChatChannel()))
          as _i15.Future<_i10.ChatChannel>);
  @override
  _i15.Future<_i10.ChatChannel> getActionChannel(int? idNr) =>
      (super.noSuchMethod(Invocation.method(#getActionChannel, [idNr]),
              returnValue: Future.value(_FakeChatChannel()))
          as _i15.Future<_i10.ChatChannel>);
  @override
  _i15.Future<_i10.ChatChannel> getChannel(String? id) =>
      (super.noSuchMethod(Invocation.method(#getChannel, [id]),
              returnValue: Future.value(_FakeChatChannel()))
          as _i15.Future<_i10.ChatChannel>);
  @override
  void createChannel(String? id) =>
      super.noSuchMethod(Invocation.method(#createChannel, [id]),
          returnValueForMissingStub: null);
  @override
  void updateMessages(List<Map<String, dynamic>>? messages) =>
      super.noSuchMethod(Invocation.method(#updateMessages, [messages]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PushNotificationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationManager extends _i2.Mock
    implements _i23.PushNotificationManager {
  MockPushNotificationManager() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i14.PushReceiveService get listener =>
      (super.noSuchMethod(Invocation.getter(#listener),
          returnValue: _FakePushReceiveService()) as _i14.PushReceiveService);
  @override
  set listener(_i14.PushReceiveService? _listener) =>
      super.noSuchMethod(Invocation.setter(#listener, _listener),
          returnValueForMissingStub: null);
  @override
  _i13.StorageService get storageService =>
      (super.noSuchMethod(Invocation.getter(#storageService),
          returnValue: _FakeStorageService()) as _i13.StorageService);
  @override
  set storageService(_i13.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i16.PushUpdateService get updateService =>
      (super.noSuchMethod(Invocation.getter(#updateService),
          returnValue: _FakePushUpdateService()) as _i16.PushUpdateService);
  @override
  set updateService(_i16.PushUpdateService? _updateService) =>
      super.noSuchMethod(Invocation.setter(#updateService, _updateService),
          returnValueForMissingStub: null);
  @override
  _i15.Future<String?> get pushToken =>
      (super.noSuchMethod(Invocation.getter(#pushToken),
          returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  set pushToken(_i15.Future<String?>? _pushToken) =>
      super.noSuchMethod(Invocation.setter(#pushToken, _pushToken),
          returnValueForMissingStub: null);
  @override
  Map<String, _i23.PushNotificationListener> get callbackMap =>
      (super.noSuchMethod(Invocation.getter(#callbackMap),
              returnValue: <String, _i23.PushNotificationListener>{})
          as Map<String, _i23.PushNotificationListener>);
  @override
  set callbackMap(Map<String, _i23.PushNotificationListener>? _callbackMap) =>
      super.noSuchMethod(Invocation.setter(#callbackMap, _callbackMap),
          returnValueForMissingStub: null);
  @override
  _i15.Future<_i14.PushReceiveService> createPushListener(
          _i14.FirebaseReceiveService? firebaseService, _i5.Backend? backend) =>
      (super.noSuchMethod(
          Invocation.method(#createPushListener, [firebaseService, backend]),
          returnValue:
              Future.value(_FakePushReceiveService())) as _i15
          .Future<_i14.PushReceiveService>);
  @override
  dynamic onReceived(_i20.RemoteMessage? message) =>
      super.noSuchMethod(Invocation.method(#onReceived, [message]));
  @override
  dynamic onTap(_i20.RemoteMessage? message) =>
      super.noSuchMethod(Invocation.method(#onTap, [message]));
  @override
  void registerMessageCallback(
          String? id, _i23.PushNotificationListener? callback) =>
      super.noSuchMethod(
          Invocation.method(#registerMessageCallback, [id, callback]),
          returnValueForMissingStub: null);
  @override
  void subscribeToKiezActionTopics(List<String>? kieze, String? interval) =>
      super.noSuchMethod(
          Invocation.method(#subscribeToKiezActionTopics, [kieze, interval]),
          returnValueForMissingStub: null);
  @override
  void unsubscribeFromKiezActionTopics(List<String>? kieze, String? interval) =>
      super.noSuchMethod(
          Invocation.method(
              #unsubscribeFromKiezActionTopics, [kieze, interval]),
          returnValueForMissingStub: null);
  @override
  _i15.Future<void> updateMessages() =>
      (super.noSuchMethod(Invocation.method(#updateMessages, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
}

/// A class which mocks [GeoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoService extends _i2.Mock implements _i18.GeoService {
  MockGeoService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i17.HttpClient get httpClient =>
      (super.noSuchMethod(Invocation.getter(#httpClient),
          returnValue: _FakeHttpClient()) as _i17.HttpClient);
  @override
  set httpClient(_i17.HttpClient? _httpClient) =>
      super.noSuchMethod(Invocation.setter(#httpClient, _httpClient),
          returnValueForMissingStub: null);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  set host(String? _host) => super.noSuchMethod(Invocation.setter(#host, _host),
      returnValueForMissingStub: null);
  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  set port(int? _port) => super.noSuchMethod(Invocation.setter(#port, _port),
      returnValueForMissingStub: null);
  @override
  _i15.Future<_i18.GeoData> getDescriptionToPoint(_i34.LatLng? point) =>
      (super.noSuchMethod(Invocation.method(#getDescriptionToPoint, [point]),
              returnValue: Future.value(_FakeGeoData()))
          as _i15.Future<_i18.GeoData>);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i2.Mock implements _i35.FirebaseMessaging {
  MockFirebaseMessaging() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i19.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i19.FirebaseApp);
  @override
  set app(_i19.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  _i15.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as _i15.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i15.Future<_i20.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future.value(_FakeRemoteMessage()))
          as _i15.Future<_i20.RemoteMessage?>);
  @override
  _i15.Future<void> deleteToken({String? senderId}) => (super.noSuchMethod(
      Invocation.method(#deleteToken, [], {#senderId: senderId}),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  _i15.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  _i15.Future<_i21.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future.value(_FakeNotificationSettings()))
          as _i15.Future<_i21.NotificationSettings>);
  @override
  _i15.Future<_i21.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future.value(_FakeNotificationSettings()))
          as _i15.Future<_i21.NotificationSettings>);
  @override
  _i15.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl
          }),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAutoInitEnabled, [enabled]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setForegroundNotificationPresentationOptions, [],
              {#alert: alert, #badge: badge, #sound: sound}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#subscribeToTopic, [topic]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unsubscribeFromTopic, [topic]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i2.Mock implements _i5.Backend {
  MockBackend() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> get zertifikatGeladen =>
      (super.noSuchMethod(Invocation.getter(#zertifikatGeladen),
          returnValue: Future.value(null)) as _i15.Future<void>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(
          String? url, Map<String, String>? headers) =>
      (super.noSuchMethod(Invocation.method(#get, [url, headers]),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(
          String? url, String? data, Map<String, String>? headers,
          [Map<String, String>? parameters]) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data, headers, parameters]),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(
          String? url, String? data, Map<String, String>? headers) =>
      (super.noSuchMethod(Invocation.method(#delete, [url, data, headers]),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<void> callGoogle() =>
      (super.noSuchMethod(Invocation.method(#callGoogle, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<_i22.ServerHealth> getServerHealth() =>
      (super.noSuchMethod(Invocation.method(#getServerHealth, []),
              returnValue: Future.value(_FakeServerHealth()))
          as _i15.Future<_i22.ServerHealth>);
}

/// A class which mocks [LocalNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotificationService extends _i2.Mock
    implements _i3.LocalNotificationService {
  MockLocalNotificationService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i23.AbstractPushNotificationManager get pushManager =>
      (super.noSuchMethod(Invocation.getter(#pushManager),
              returnValue: _FakeAbstractPushNotificationManager())
          as _i23.AbstractPushNotificationManager);
  @override
  set pushManager(_i23.AbstractPushNotificationManager? _pushManager) =>
      super.noSuchMethod(Invocation.setter(#pushManager, _pushManager),
          returnValueForMissingStub: null);
  @override
  dynamic Function(String) get onTap =>
      (super.noSuchMethod(Invocation.getter(#onTap),
          returnValue: (String __p0) => null) as dynamic Function(String));
  @override
  set onTap(dynamic Function(String)? _onTap) =>
      super.noSuchMethod(Invocation.setter(#onTap, _onTap),
          returnValueForMissingStub: null);
  @override
  _i15.Future<dynamic> sendChatNotification(
          _i32.ActionChatMessagePushData? chatMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendChatNotification, [chatMessage]),
          returnValue: Future.value(null)) as _i15.Future<dynamic>);
  @override
  _i15.Future<void> sendParticipationNotification(
          _i32.ParticipationPushData? data) =>
      (super.noSuchMethod(
          Invocation.method(#sendParticipationNotification, [data]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> sendNewActionsNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendNewActionsNotification, [partMessage]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> sendActionDeletedNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendActionDeletedNotification, [partMessage]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> sendActionChangedNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendActionChangedNotification, [partMessage]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  _i15.Future<void> sendOtherNotification(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#sendOtherNotification, [data]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i15.Future<void>);
  @override
  void sendTopicChatNotification(
          _i32.TopicChatMessagePushData? topicChatMessagePushData) =>
      super.noSuchMethod(
          Invocation.method(
              #sendTopicChatNotification, [topicChatMessagePushData]),
          returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseReceiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseReceiveService extends _i2.Mock
    implements _i14.FirebaseReceiveService {
  MockFirebaseReceiveService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.Future<String?> get token =>
      (super.noSuchMethod(Invocation.getter(#token),
          returnValue: Future.value('')) as _i15.Future<String?>);
  @override
  set token(_i15.Future<String?>? _token) =>
      super.noSuchMethod(Invocation.setter(#token, _token),
          returnValueForMissingStub: null);
  @override
  bool get pullMode =>
      (super.noSuchMethod(Invocation.getter(#pullMode), returnValue: false)
          as bool);
  @override
  void subscribeToTopics(List<String>? topics) =>
      super.noSuchMethod(Invocation.method(#subscribeToTopics, [topics]),
          returnValueForMissingStub: null);
  @override
  void unsubscribeFromTopics(List<String>? topics) =>
      super.noSuchMethod(Invocation.method(#unsubscribeFromTopics, [topics]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Translations].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslations extends _i2.Mock implements _i37.Translations {
  MockTranslations() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as String?);
  @override
  String? getNested(String? key) =>
      (super.noSuchMethod(Invocation.method(#getNested, [key])) as String?);
  @override
  bool isNestedCached(String? key) =>
      (super.noSuchMethod(Invocation.method(#isNestedCached, [key]),
          returnValue: false) as bool);
  @override
  void cacheNestedKey(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#cacheNestedKey, [key, value]),
          returnValueForMissingStub: null);
  @override
  bool isNestedKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#isNestedKey, [key]),
          returnValue: false) as bool);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i2.Mock
    implements _i17.HttpClientResponse {
  MockHttpClientResponse() {
    _i2.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i17.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
          returnValue: _i17.HttpClientResponseCompressionState
              .notCompressed) as _i17.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i17.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i17.RedirectInfo>[]) as List<_i17.RedirectInfo>);
  @override
  _i17.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i17.HttpHeaders);
  @override
  List<_i17.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i17.Cookie>[]) as List<_i17.Cookie>);
  @override
  _i15.Future<_i17.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i15.Future<_i17.HttpClientResponse>);
  @override
  _i15.Future<_i24.Socket> detachSocket() => (super.noSuchMethod(
      Invocation.method(#detachSocket, []),
      returnValue: Future.value(_FakeSocket())) as _i15.Future<_i24.Socket>);
}

/// A class which mocks [HttpClientResponseBody].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponseBody extends _i2.Mock
    implements _i8.HttpClientResponseBody {
  MockHttpClientResponseBody() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i17.HttpClientResponse get response =>
      (super.noSuchMethod(Invocation.getter(#response),
          returnValue: _FakeHttpClientResponse()) as _i17.HttpClientResponse);
  @override
  String get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: '') as String);
}

/// A class which mocks [DemoPushSendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDemoPushSendService extends _i2.Mock
    implements _i31.DemoPushSendService {
  MockDemoPushSendService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.StreamController<_i32.PushData> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i32.PushData>())
          as _i15.StreamController<_i32.PushData>);
  @override
  set controller(_i15.StreamController<_i32.PushData>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  dynamic pushToDevices(List<String>? recipients, _i32.PushData? data,
          _i32.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToDevices, [recipients, data, notification]));
  @override
  dynamic pushToAction(int? actionId, _i32.PushData? data,
          _i32.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToAction, [actionId, data, notification]));
  @override
  _i15.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data],
                  {#parameters: parameters, #appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> delete(String? url, String? data,
          {bool? appAuth}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url, data], {#appAuth: appAuth}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
  @override
  _i15.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue: Future.value(<String, String>{}))
          as _i15.Future<Map<String, String>>);
  @override
  _i15.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future.value(_FakeHttpClientResponseBody()))
          as _i15.Future<_i8.HttpClientResponseBody>);
}
