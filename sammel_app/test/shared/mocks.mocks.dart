// Mocks generated by Mockito 5.0.7 from annotations
// in sammel_app/test/shared/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;

import 'package:easy_localization/src/translations.dart' as _i37;
import 'package:firebase_messaging_platform_interface/src/remote_message.dart'
    as _i34;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i33;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i35;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i41;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i43;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i45;
import 'package:flutter_local_notifications/src/typedefs.dart' as _i42;
import 'package:flutter_local_notifications/src/types.dart' as _i46;
import 'package:flutter_local_notifications_platform_interface/src/notification_app_launch_details.dart'
    as _i18;
import 'package:flutter_local_notifications_platform_interface/src/types.dart'
    as _i47;
import 'package:http_server/src/http_body.dart' as _i8;
import 'package:latlong2/latlong.dart' as _i38;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sammel_app/model/ActionListPushData.dart' as _i36;
import 'package:sammel_app/model/ChatChannel.dart' as _i13;
import 'package:sammel_app/model/Evaluation.dart' as _i27;
import 'package:sammel_app/model/FAQItem.dart' as _i40;
import 'package:sammel_app/model/Health.dart' as _i15;
import 'package:sammel_app/model/Kiez.dart' as _i17;
import 'package:sammel_app/model/ListLocation.dart' as _i29;
import 'package:sammel_app/model/Placard.dart' as _i19;
import 'package:sammel_app/model/PushMessage.dart' as _i31;
import 'package:sammel_app/model/Termin.dart' as _i7;
import 'package:sammel_app/model/TermineFilter.dart' as _i24;
import 'package:sammel_app/model/User.dart' as _i12;
import 'package:sammel_app/model/VisitedHouse.dart' as _i21;
import 'package:sammel_app/routes/TermineSeite.dart' as _i26;
import 'package:sammel_app/services/BackendService.dart' as _i5;
import 'package:sammel_app/services/ChatMessageService.dart' as _i32;
import 'package:sammel_app/services/FAQService.dart' as _i39;
import 'package:sammel_app/services/GeoService.dart' as _i20;
import 'package:sammel_app/services/ListLocationService.dart' as _i28;
import 'package:sammel_app/services/LocalNotificationService.dart' as _i2;
import 'package:sammel_app/services/PlacardsService.dart' as _i48;
import 'package:sammel_app/services/PushNotificationManager.dart' as _i16;
import 'package:sammel_app/services/PushReceiveService.dart' as _i10;
import 'package:sammel_app/services/PushSendService.dart' as _i30;
import 'package:sammel_app/services/PushUpdateService.dart' as _i14;
import 'package:sammel_app/services/StammdatenService.dart' as _i3;
import 'package:sammel_app/services/StorageService.dart' as _i9;
import 'package:sammel_app/services/TermineService.dart' as _i25;
import 'package:sammel_app/services/UserService.dart' as _i6;
import 'package:sammel_app/services/VisitedHousesService.dart' as _i49;
import 'package:sammel_app/services/VisitedHouseView.dart' as _i22;
import 'package:shared_preferences/shared_preferences.dart' as _i23;
import 'package:timezone/src/date_time.dart' as _i44;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeLocalNotificationService extends _i1.Fake
    implements _i2.LocalNotificationService {}

class _FakeStammdatenService extends _i1.Fake implements _i3.StammdatenService {
}

class _FakeGlobalKey<T extends _i4.State<_i4.StatefulWidget>> extends _i1.Fake
    implements _i4.GlobalKey<T> {}

class _FakeBackend extends _i1.Fake implements _i5.Backend {}

class _FakeAbstractUserService extends _i1.Fake
    implements _i6.AbstractUserService {}

class _FakeTermin extends _i1.Fake implements _i7.Termin {}

class _FakeHttpClientResponseBody extends _i1.Fake
    implements _i8.HttpClientResponseBody {}

class _FakeStorageService extends _i1.Fake implements _i9.StorageService {}

class _FakeFirebaseReceiveService extends _i1.Fake
    implements _i10.FirebaseReceiveService {}

class _FakeStreamController<T> extends _i1.Fake
    implements _i11.StreamController<T> {}

class _FakeUser extends _i1.Fake implements _i12.User {}

class _FakeChatChannel extends _i1.Fake implements _i13.ChatChannel {}

class _FakePushReceiveService extends _i1.Fake
    implements _i10.PushReceiveService {}

class _FakePushUpdateService extends _i1.Fake
    implements _i14.PushUpdateService {}

class _FakeServerHealth extends _i1.Fake implements _i15.ServerHealth {}

class _FakeAbstractPushNotificationManager extends _i1.Fake
    implements _i16.AbstractPushNotificationManager {}

class _FakeKiez extends _i1.Fake implements _i17.Kiez {}

class _FakeNotificationAppLaunchDetails extends _i1.Fake
    implements _i18.NotificationAppLaunchDetails {}

class _FakePlacard extends _i1.Fake implements _i19.Placard {}

class _FakeGeoService extends _i1.Fake implements _i20.GeoService {}

class _FakeVisitedHouse extends _i1.Fake implements _i21.VisitedHouse {}

class _FakeVisitedHouseView extends _i1.Fake implements _i22.VisitedHouseView {}

class _FakeSharedPreferences extends _i1.Fake
    implements _i23.SharedPreferences {}

class _FakeTermineFilter extends _i1.Fake implements _i24.TermineFilter {}

class _FakeDateTime extends _i1.Fake implements DateTime {}

/// A class which mocks [TermineService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTermineService extends _i1.Mock implements _i25.TermineService {
  MockTermineService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocalNotificationService get localNotificationService =>
      (super.noSuchMethod(Invocation.getter(#localNotificationService),
              returnValue: _FakeLocalNotificationService())
          as _i2.LocalNotificationService);
  @override
  set localNotificationService(
          _i2.LocalNotificationService? _localNotificationService) =>
      super.noSuchMethod(
          Invocation.setter(
              #localNotificationService, _localNotificationService),
          returnValueForMissingStub: null);
  @override
  _i3.StammdatenService get stammdatenService =>
      (super.noSuchMethod(Invocation.getter(#stammdatenService),
          returnValue: _FakeStammdatenService()) as _i3.StammdatenService);
  @override
  set stammdatenService(_i3.StammdatenService? _stammdatenService) => super
      .noSuchMethod(Invocation.setter(#stammdatenService, _stammdatenService),
          returnValueForMissingStub: null);
  @override
  _i4.GlobalKey<_i26.TermineSeiteState> get actionPageKey =>
      (super.noSuchMethod(Invocation.getter(#actionPageKey),
              returnValue: _FakeGlobalKey<_i26.TermineSeiteState>())
          as _i4.GlobalKey<_i26.TermineSeiteState>);
  @override
  set actionPageKey(_i4.GlobalKey<_i26.TermineSeiteState>? _actionPageKey) =>
      super.noSuchMethod(Invocation.setter(#actionPageKey, _actionPageKey),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<List<_i7.Termin>> loadActions(_i24.TermineFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#loadActions, [filter]),
              returnValue: Future<List<_i7.Termin>>.value(<_i7.Termin>[]))
          as _i11.Future<List<_i7.Termin>>);
  @override
  _i11.Future<_i7.Termin> createAction(_i7.Termin? termin, String? token) =>
      (super.noSuchMethod(Invocation.method(#createAction, [termin, token]),
              returnValue: Future<_i7.Termin>.value(_FakeTermin()))
          as _i11.Future<_i7.Termin>);
  @override
  _i11.Future<_i7.Termin> getActionWithDetails(int? id) =>
      (super.noSuchMethod(Invocation.method(#getActionWithDetails, [id]),
              returnValue: Future<_i7.Termin>.value(_FakeTermin()))
          as _i11.Future<_i7.Termin>);
  @override
  _i11.Future<void> saveAction(_i7.Termin? action, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveAction, [action, token]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  dynamic deleteAction(_i7.Termin? action, String? token) =>
      super.noSuchMethod(Invocation.method(#deleteAction, [action, token]));
  @override
  dynamic joinAction(int? id) =>
      super.noSuchMethod(Invocation.method(#joinAction, [id]));
  @override
  dynamic leaveAction(int? id) =>
      super.noSuchMethod(Invocation.method(#leaveAction, [id]));
  @override
  void handleNotificationTap(Map<String, dynamic>? data) =>
      super.noSuchMethod(Invocation.method(#handleNotificationTap, [data]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> loadAndShowAction(int? id) =>
      (super.noSuchMethod(Invocation.method(#loadAndShowAction, [id]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  void receiveMessage(Map<String, dynamic>? data) =>
      super.noSuchMethod(Invocation.method(#receiveMessage, [data]),
          returnValueForMissingStub: null);
  @override
  void updateMessages(List<Map<String, dynamic>>? data) =>
      super.noSuchMethod(Invocation.method(#updateMessages, [data]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> saveEvaluation(_i27.Evaluation? evaluation) =>
      (super.noSuchMethod(Invocation.method(#saveEvaluation, [evaluation]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [ListLocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListLocationService extends _i1.Mock
    implements _i28.ListLocationService {
  MockListLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set cache(List<_i29.ListLocation>? _cache) =>
      super.noSuchMethod(Invocation.setter(#cache, _cache),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<List<_i29.ListLocation>> getActiveListLocations() =>
      (super.noSuchMethod(Invocation.method(#getActiveListLocations, []),
              returnValue:
                  Future<List<_i29.ListLocation>>.value(<_i29.ListLocation>[]))
          as _i11.Future<List<_i29.ListLocation>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [PushSendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushSendService extends _i1.Mock implements _i30.PushSendService {
  MockPushSendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  dynamic pushToDevices(List<String>? recipients, _i31.PushData? data,
          _i31.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToDevices, [recipients, data, notification]));
  @override
  dynamic pushToAction(int? actionId, _i31.PushData? data,
          _i31.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToAction, [actionId, data, notification]));
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i6.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.StorageService get storageService =>
      (super.noSuchMethod(Invocation.getter(#storageService),
          returnValue: _FakeStorageService()) as _i9.StorageService);
  @override
  set storageService(_i9.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  _i10.FirebaseReceiveService get firebase =>
      (super.noSuchMethod(Invocation.getter(#firebase),
              returnValue: _FakeFirebaseReceiveService())
          as _i10.FirebaseReceiveService);
  @override
  set firebase(_i10.FirebaseReceiveService? _firebase) =>
      super.noSuchMethod(Invocation.setter(#firebase, _firebase),
          returnValueForMissingStub: null);
  @override
  _i11.StreamController<_i12.User> get streamController =>
      (super.noSuchMethod(Invocation.getter(#streamController),
              returnValue: _FakeStreamController<_i12.User>())
          as _i11.StreamController<_i12.User>);
  @override
  set latestUser(_i12.User? _latestUser) =>
      super.noSuchMethod(Invocation.setter(#latestUser, _latestUser),
          returnValueForMissingStub: null);
  @override
  _i11.Future<Map<String, String>> get userHeaders => (super.noSuchMethod(
          Invocation.getter(#userHeaders),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i11.Future<Map<String, String>>);
  @override
  set userHeaders(_i11.Future<Map<String, String>>? _userHeaders) =>
      super.noSuchMethod(Invocation.setter(#userHeaders, _userHeaders),
          returnValueForMissingStub: null);
  @override
  _i11.Stream<_i12.User> get user =>
      (super.noSuchMethod(Invocation.getter(#user),
          returnValue: Stream<_i12.User>.empty()) as _i11.Stream<_i12.User>);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i12.User> createNewUser() =>
      (super.noSuchMethod(Invocation.method(#createNewUser, []),
              returnValue: Future<_i12.User>.value(_FakeUser()))
          as _i11.Future<_i12.User>);
  @override
  dynamic verifyUser(_i12.User? user) =>
      super.noSuchMethod(Invocation.method(#verifyUser, [user]));
  @override
  _i11.Future<String> generateSecret() =>
      (super.noSuchMethod(Invocation.method(#generateSecret, []),
          returnValue: Future<String>.value('')) as _i11.Future<String>);
  @override
  dynamic updateUsername(String? name) =>
      super.noSuchMethod(Invocation.method(#updateUsername, [name]));
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [ChatMessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatMessageService extends _i1.Mock
    implements _i32.ChatMessageService {
  MockChatMessageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set navigatorKey(_i4.GlobalKey<_i33.NavigatorState>? _navigatorKey) =>
      super.noSuchMethod(Invocation.setter(#navigatorKey, _navigatorKey),
          returnValueForMissingStub: null);
  @override
  Map<String, _i13.ChatChannel> get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
              returnValue: <String, _i13.ChatChannel>{})
          as Map<String, _i13.ChatChannel>);
  @override
  set channels(Map<String, _i13.ChatChannel>? _channels) =>
      super.noSuchMethod(Invocation.setter(#channels, _channels),
          returnValueForMissingStub: null);
  @override
  set storageService(_i9.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  void receiveMessage(Map<String, dynamic>? json) =>
      super.noSuchMethod(Invocation.method(#receiveMessage, [json]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i13.ChatChannel> storeMessage(_i31.ChatPushData? pushData) =>
      (super.noSuchMethod(Invocation.method(#storeMessage, [pushData]),
              returnValue: Future<_i13.ChatChannel>.value(_FakeChatChannel()))
          as _i11.Future<_i13.ChatChannel>);
  @override
  _i11.Future<List<_i13.ChatChannel>> storeMessages(
          List<_i31.ChatPushData>? pushData) =>
      (super.noSuchMethod(Invocation.method(#storeMessages, [pushData]),
              returnValue:
                  Future<List<_i13.ChatChannel>>.value(<_i13.ChatChannel>[]))
          as _i11.Future<List<_i13.ChatChannel>>);
  @override
  _i11.Future<void> handleNotificationTap(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#handleNotificationTap, [data]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  void createOrRecreateChatPage(_i4.State<_i4.StatefulWidget>? cls,
          _i13.ChatChannel? channel, int? terminId) =>
      super.noSuchMethod(
          Invocation.method(
              #createOrRecreateChatPage, [cls, channel, terminId]),
          returnValueForMissingStub: null);
  @override
  void createOrRecreateTpoicPage(
          _i4.State<_i4.StatefulWidget>? cls, _i13.ChatChannel? channel) =>
      super.noSuchMethod(
          Invocation.method(#createOrRecreateTpoicPage, [cls, channel]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i13.ChatChannel> getTopicChannel(String? topic) =>
      (super.noSuchMethod(Invocation.method(#getTopicChannel, [topic]),
              returnValue: Future<_i13.ChatChannel>.value(_FakeChatChannel()))
          as _i11.Future<_i13.ChatChannel>);
  @override
  _i11.Future<_i13.ChatChannel> getActionChannel(int? idNr) =>
      (super.noSuchMethod(Invocation.method(#getActionChannel, [idNr]),
              returnValue: Future<_i13.ChatChannel>.value(_FakeChatChannel()))
          as _i11.Future<_i13.ChatChannel>);
  @override
  _i11.Future<_i13.ChatChannel> getChannel(String? id) =>
      (super.noSuchMethod(Invocation.method(#getChannel, [id]),
              returnValue: Future<_i13.ChatChannel>.value(_FakeChatChannel()))
          as _i11.Future<_i13.ChatChannel>);
  @override
  void createChannel(String? id) =>
      super.noSuchMethod(Invocation.method(#createChannel, [id]),
          returnValueForMissingStub: null);
  @override
  void updateMessages(List<Map<String, dynamic>>? messages) =>
      super.noSuchMethod(Invocation.method(#updateMessages, [messages]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PushNotificationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationManager extends _i1.Mock
    implements _i16.PushNotificationManager {
  MockPushNotificationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.PushReceiveService get listener =>
      (super.noSuchMethod(Invocation.getter(#listener),
          returnValue: _FakePushReceiveService()) as _i10.PushReceiveService);
  @override
  set listener(_i10.PushReceiveService? _listener) =>
      super.noSuchMethod(Invocation.setter(#listener, _listener),
          returnValueForMissingStub: null);
  @override
  _i9.StorageService get storageService =>
      (super.noSuchMethod(Invocation.getter(#storageService),
          returnValue: _FakeStorageService()) as _i9.StorageService);
  @override
  set storageService(_i9.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i14.PushUpdateService get updateService =>
      (super.noSuchMethod(Invocation.getter(#updateService),
          returnValue: _FakePushUpdateService()) as _i14.PushUpdateService);
  @override
  set updateService(_i14.PushUpdateService? _updateService) =>
      super.noSuchMethod(Invocation.setter(#updateService, _updateService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<String?> get pushToken =>
      (super.noSuchMethod(Invocation.getter(#pushToken),
          returnValue: Future<String?>.value('')) as _i11.Future<String?>);
  @override
  set pushToken(_i11.Future<String?>? _pushToken) =>
      super.noSuchMethod(Invocation.setter(#pushToken, _pushToken),
          returnValueForMissingStub: null);
  @override
  Map<String, _i16.PushNotificationListener> get callbackMap =>
      (super.noSuchMethod(Invocation.getter(#callbackMap),
              returnValue: <String, _i16.PushNotificationListener>{})
          as Map<String, _i16.PushNotificationListener>);
  @override
  set callbackMap(Map<String, _i16.PushNotificationListener>? _callbackMap) =>
      super.noSuchMethod(Invocation.setter(#callbackMap, _callbackMap),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i10.PushReceiveService> createPushListener(
          _i10.FirebaseReceiveService? firebaseService, _i5.Backend? backend) =>
      (super.noSuchMethod(
          Invocation.method(#createPushListener, [firebaseService, backend]),
          returnValue: Future<_i10.PushReceiveService>.value(
              _FakePushReceiveService())) as _i11
          .Future<_i10.PushReceiveService>);
  @override
  dynamic onReceived(_i34.RemoteMessage? message) =>
      super.noSuchMethod(Invocation.method(#onReceived, [message]));
  @override
  dynamic onTap(_i34.RemoteMessage? message) =>
      super.noSuchMethod(Invocation.method(#onTap, [message]));
  @override
  void registerMessageCallback(
          String? id, _i16.PushNotificationListener? callback) =>
      super.noSuchMethod(
          Invocation.method(#registerMessageCallback, [id, callback]),
          returnValueForMissingStub: null);
  @override
  void subscribeToKiezActionTopics(List<String>? kieze, String? interval) =>
      super.noSuchMethod(
          Invocation.method(#subscribeToKiezActionTopics, [kieze, interval]),
          returnValueForMissingStub: null);
  @override
  void unsubscribeFromKiezActionTopics(List<String>? kieze, String? interval) =>
      super.noSuchMethod(
          Invocation.method(
              #unsubscribeFromKiezActionTopics, [kieze, interval]),
          returnValueForMissingStub: null);
  @override
  _i11.Future<void> updateMessages() =>
      (super.noSuchMethod(Invocation.method(#updateMessages, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i5.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> get zertifikatGeladen =>
      (super.noSuchMethod(Invocation.getter(#zertifikatGeladen),
          returnValue: Future<void>.value(null)) as _i11.Future<void>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(
          String? url, Map<String, String>? headers) =>
      (super.noSuchMethod(Invocation.method(#get, [url, headers]),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(
          String? url, String? data, Map<String, String>? headers,
          [Map<String, String>? parameters]) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url, data, headers, parameters]),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(
          String? url, String? data, Map<String, String>? headers) =>
      (super.noSuchMethod(Invocation.method(#delete, [url, data, headers]),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<void> callGoogle() =>
      (super.noSuchMethod(Invocation.method(#callGoogle, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<_i15.ServerHealth> getServerHealth() =>
      (super.noSuchMethod(Invocation.method(#getServerHealth, []),
              returnValue: Future<_i15.ServerHealth>.value(_FakeServerHealth()))
          as _i11.Future<_i15.ServerHealth>);
}

/// A class which mocks [LocalNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotificationService extends _i1.Mock
    implements _i2.LocalNotificationService {
  MockLocalNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set plugin(_i35.FlutterLocalNotificationsPlugin? _plugin) =>
      super.noSuchMethod(Invocation.setter(#plugin, _plugin),
          returnValueForMissingStub: null);
  @override
  _i16.AbstractPushNotificationManager get pushManager =>
      (super.noSuchMethod(Invocation.getter(#pushManager),
              returnValue: _FakeAbstractPushNotificationManager())
          as _i16.AbstractPushNotificationManager);
  @override
  set pushManager(_i16.AbstractPushNotificationManager? _pushManager) =>
      super.noSuchMethod(Invocation.setter(#pushManager, _pushManager),
          returnValueForMissingStub: null);
  @override
  dynamic Function(String?) get onTap =>
      (super.noSuchMethod(Invocation.getter(#onTap),
          returnValue: (String? __p0) => null) as dynamic Function(String?));
  @override
  set onTap(dynamic Function(String?)? _onTap) =>
      super.noSuchMethod(Invocation.setter(#onTap, _onTap),
          returnValueForMissingStub: null);
  @override
  _i11.Future<dynamic> sendChatNotification(
          _i31.ActionChatMessagePushData? chatMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendChatNotification, [chatMessage]),
          returnValue: Future<dynamic>.value(null)) as _i11.Future<dynamic>);
  @override
  _i11.Future<void> sendParticipationNotification(
          _i31.ParticipationPushData? data) =>
      (super.noSuchMethod(
          Invocation.method(#sendParticipationNotification, [data]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> sendNewActionsNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendNewActionsNotification, [partMessage]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> sendActionDeletedNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendActionDeletedNotification, [partMessage]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> sendActionChangedNotification(
          _i36.ActionListPushData? partMessage) =>
      (super.noSuchMethod(
          Invocation.method(#sendActionChangedNotification, [partMessage]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> sendOtherNotification(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#sendOtherNotification, [data]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  void sendTopicChatNotification(
          _i31.TopicChatMessagePushData? topicChatMessagePushData) =>
      super.noSuchMethod(
          Invocation.method(
              #sendTopicChatNotification, [topicChatMessagePushData]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Translations].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslations extends _i1.Mock implements _i37.Translations {
  MockTranslations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as String?);
  @override
  String? getNested(String? key) =>
      (super.noSuchMethod(Invocation.method(#getNested, [key])) as String?);
  @override
  bool isNestedCached(String? key) =>
      (super.noSuchMethod(Invocation.method(#isNestedCached, [key]),
          returnValue: false) as bool);
  @override
  void cacheNestedKey(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#cacheNestedKey, [key, value]),
          returnValueForMissingStub: null);
  @override
  bool isNestedKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#isNestedKey, [key]),
          returnValue: false) as bool);
}

/// A class which mocks [DemoPushSendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDemoPushSendService extends _i1.Mock
    implements _i30.DemoPushSendService {
  MockDemoPushSendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.StreamController<_i31.PushData> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i31.PushData>())
          as _i11.StreamController<_i31.PushData>);
  @override
  set controller(_i11.StreamController<_i31.PushData>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  dynamic pushToDevices(List<String>? recipients, _i31.PushData? data,
          _i31.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToDevices, [recipients, data, notification]));
  @override
  dynamic pushToAction(int? actionId, _i31.PushData? data,
          _i31.PushNotification? notification) =>
      super.noSuchMethod(
          Invocation.method(#pushToAction, [actionId, data, notification]));
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [StammdatenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStammdatenService extends _i1.Mock implements _i3.StammdatenService {
  MockStammdatenService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<Set<_i17.Kiez>> get kieze =>
      (super.noSuchMethod(Invocation.getter(#kieze),
              returnValue: Future<Set<_i17.Kiez>>.value(<_i17.Kiez>{}))
          as _i11.Future<Set<_i17.Kiez>>);
  @override
  _i11.Future<Set<_i17.Region>> get regionen =>
      (super.noSuchMethod(Invocation.getter(#regionen),
              returnValue: Future<Set<_i17.Region>>.value(<_i17.Region>{}))
          as _i11.Future<Set<_i17.Region>>);
  @override
  _i11.Future<Set<_i17.Ortsteil>> get ortsteile =>
      (super.noSuchMethod(Invocation.getter(#ortsteile),
              returnValue: Future<Set<_i17.Ortsteil>>.value(<_i17.Ortsteil>{}))
          as _i11.Future<Set<_i17.Ortsteil>>);
  @override
  _i11.Future<_i17.Kiez?> getKiezAtLocation(_i38.LatLng? point) =>
      (super.noSuchMethod(Invocation.method(#getKiezAtLocation, [point]),
              returnValue: Future<_i17.Kiez?>.value(_FakeKiez()))
          as _i11.Future<_i17.Kiez?>);
}

/// A class which mocks [FAQService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFAQService extends _i1.Mock implements _i39.FAQService {
  MockFAQService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.StorageService get storageService =>
      (super.noSuchMethod(Invocation.getter(#storageService),
          returnValue: _FakeStorageService()) as _i9.StorageService);
  @override
  set storageService(_i9.StorageService? _storageService) =>
      super.noSuchMethod(Invocation.setter(#storageService, _storageService),
          returnValueForMissingStub: null);
  @override
  _i11.StreamController<List<_i40.FAQItem>?> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<List<_i40.FAQItem>?>())
          as _i11.StreamController<List<_i40.FAQItem>?>);
  @override
  set controller(_i11.StreamController<List<_i40.FAQItem>?>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i11.Stream<List<_i40.FAQItem>?> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<List<_i40.FAQItem>?>.empty())
          as _i11.Stream<List<_i40.FAQItem>?>);
  @override
  set stream(_i11.Stream<List<_i40.FAQItem>?>? _stream) =>
      super.noSuchMethod(Invocation.setter(#stream, _stream),
          returnValueForMissingStub: null);
  @override
  set latest(List<_i40.FAQItem>? _latest) =>
      super.noSuchMethod(Invocation.setter(#latest, _latest),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Stream<List<_i40.FAQItem>?> getSortedFAQ(String? search) =>
      (super.noSuchMethod(Invocation.method(#getSortedFAQ, [search]),
              returnValue: Stream<List<_i40.FAQItem>?>.empty())
          as _i11.Stream<List<_i40.FAQItem>?>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i35.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool?> initialize(
          _i41.InitializationSettings? initializationSettings,
          {_i42.SelectNotificationCallback? onSelectNotification}) =>
      (super.noSuchMethod(
          Invocation.method(#initialize, [initializationSettings],
              {#onSelectNotification: onSelectNotification}),
          returnValue: Future<bool?>.value(false)) as _i11.Future<bool?>);
  @override
  _i11.Future<_i18.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
              Invocation.method(#getNotificationAppLaunchDetails, []),
              returnValue: Future<_i18.NotificationAppLaunchDetails?>.value(
                  _FakeNotificationAppLaunchDetails()))
          as _i11.Future<_i18.NotificationAppLaunchDetails?>);
  @override
  _i11.Future<void> show(int? id, String? title, String? body,
          _i43.NotificationDetails? notificationDetails, {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(#show, [id, title, body, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(Invocation.method(#cancel, [id], {#tag: tag}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> cancelAll() =>
      (super.noSuchMethod(Invocation.method(#cancelAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> schedule(
          int? id,
          String? title,
          String? body,
          DateTime? scheduledDate,
          _i43.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#schedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> zonedSchedule(
          int? id,
          String? title,
          String? body,
          _i44.TZDateTime? scheduledDate,
          _i43.NotificationDetails? notificationDetails,
          {_i45.UILocalNotificationDateInterpretation?
              uiLocalNotificationDateInterpretation,
          bool? androidAllowWhileIdle,
          String? payload,
          _i46.DateTimeComponents? matchDateTimeComponents}) =>
      (super.noSuchMethod(
          Invocation.method(#zonedSchedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> periodicallyShow(
          int? id,
          String? title,
          String? body,
          _i47.RepeatInterval? repeatInterval,
          _i43.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#periodicallyShow, [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> showDailyAtTime(
          int? id,
          String? title,
          String? body,
          _i46.Time? notificationTime,
          _i43.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showDailyAtTime,
              [id, title, body, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> showWeeklyAtDayAndTime(
          int? id,
          String? title,
          String? body,
          _i46.Day? day,
          _i46.Time? notificationTime,
          _i43.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showWeeklyAtDayAndTime,
              [id, title, body, day, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<List<_i47.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
              Invocation.method(#pendingNotificationRequests, []),
              returnValue: Future<List<_i47.PendingNotificationRequest>>.value(
                  <_i47.PendingNotificationRequest>[]))
          as _i11.Future<List<_i47.PendingNotificationRequest>>);
}

/// A class which mocks [PlacardsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacardsService extends _i1.Mock implements _i48.PlacardsService {
  MockPlacardsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i19.Placard?> createPlacard(_i19.Placard? placard) =>
      (super.noSuchMethod(Invocation.method(#createPlacard, [placard]),
              returnValue: Future<_i19.Placard?>.value(_FakePlacard()))
          as _i11.Future<_i19.Placard?>);
  @override
  dynamic deletePlacard(int? id) =>
      super.noSuchMethod(Invocation.method(#deletePlacard, [id]));
  @override
  _i11.Future<List<_i19.Placard>> loadPlacards() =>
      (super.noSuchMethod(Invocation.method(#loadPlacards, []),
              returnValue: Future<List<_i19.Placard>>.value(<_i19.Placard>[]))
          as _i11.Future<List<_i19.Placard>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [VisitedHousesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitedHousesService extends _i1.Mock
    implements _i49.VisitedHousesService {
  MockVisitedHousesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.GeoService get geoService =>
      (super.noSuchMethod(Invocation.getter(#geoService),
          returnValue: _FakeGeoService()) as _i20.GeoService);
  @override
  set geoService(_i20.GeoService? _geoService) =>
      super.noSuchMethod(Invocation.setter(#geoService, _geoService),
          returnValueForMissingStub: null);
  @override
  Map<int, _i21.VisitedHouse> get localHousesMap => (super.noSuchMethod(
      Invocation.getter(#localHousesMap),
      returnValue: <int, _i21.VisitedHouse>{}) as Map<int, _i21.VisitedHouse>);
  @override
  set localHousesMap(Map<int, _i21.VisitedHouse>? _localHousesMap) =>
      super.noSuchMethod(Invocation.setter(#localHousesMap, _localHousesMap),
          returnValueForMissingStub: null);
  @override
  _i5.Backend get backend => (super.noSuchMethod(Invocation.getter(#backend),
      returnValue: _FakeBackend()) as _i5.Backend);
  @override
  _i6.AbstractUserService get userService =>
      (super.noSuchMethod(Invocation.getter(#userService),
          returnValue: _FakeAbstractUserService()) as _i6.AbstractUserService);
  @override
  set userService(_i6.AbstractUserService? _userService) =>
      super.noSuchMethod(Invocation.setter(#userService, _userService),
          returnValueForMissingStub: null);
  @override
  _i11.Future<_i21.VisitedHouse?> createVisitedHouse(
          _i21.VisitedHouse? house) =>
      (super.noSuchMethod(Invocation.method(#createVisitedHouse, [house]),
              returnValue:
                  Future<_i21.VisitedHouse?>.value(_FakeVisitedHouse()))
          as _i11.Future<_i21.VisitedHouse?>);
  @override
  _i11.Future<dynamic> deleteVisitedHouse(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteVisitedHouse, [id]),
          returnValue: Future<dynamic>.value(null)) as _i11.Future<dynamic>);
  @override
  _i11.Future<List<_i21.VisitedHouse>> loadVisitedHouses() =>
      (super.noSuchMethod(Invocation.method(#loadVisitedHouses, []),
              returnValue:
                  Future<List<_i21.VisitedHouse>>.value(<_i21.VisitedHouse>[]))
          as _i11.Future<List<_i21.VisitedHouse>>);
  @override
  _i11.Future<_i21.VisitedHouse?> getVisitedHouseOfPoint(
          _i38.LatLng? point, bool? checkOnServer) =>
      (super.noSuchMethod(
          Invocation.method(#getVisitedHouseOfPoint, [point, checkOnServer]),
          returnValue:
              Future<_i21.VisitedHouse?>.value(_FakeVisitedHouse())) as _i11
          .Future<_i21.VisitedHouse?>);
  @override
  _i21.VisitedHouse? getVistitedHouseFromJson(
          int? osmId, _i38.LatLng? point, List<_i38.LatLng>? shape) =>
      (super.noSuchMethod(Invocation.method(
              #getVistitedHouseFromJson, [osmId, point, shape]))
          as _i21.VisitedHouse?);
  @override
  _i22.VisitedHouseView getVisitedHousesInArea(_i22.BoundingBox? bbox) =>
      (super.noSuchMethod(Invocation.method(#getVisitedHousesInArea, [bbox]),
          returnValue: _FakeVisitedHouseView()) as _i22.VisitedHouseView);
  @override
  _i21.VisitedHouse? getVisitedHouseForPointLocal(_i38.LatLng? point) =>
      (super.noSuchMethod(
              Invocation.method(#getVisitedHouseForPointLocal, [point]))
          as _i21.VisitedHouse?);
  @override
  _i21.VisitedHouse editVisitedHouse(_i21.VisitedHouse? house) =>
      (super.noSuchMethod(Invocation.method(#editVisitedHouse, [house]),
          returnValue: _FakeVisitedHouse()) as _i21.VisitedHouse);
  @override
  List<_i21.VisitedHouse> getAllHouses() =>
      (super.noSuchMethod(Invocation.method(#getAllHouses, []),
          returnValue: <_i21.VisitedHouse>[]) as List<_i21.VisitedHouse>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> get(String? url, {bool? appAuth}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#appAuth: appAuth}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> post(String? url, String? data,
          {Map<String, String>? parameters, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [url, data], {#parameters: parameters, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> delete(String? url,
          {String? data, bool? appAuth}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [url], {#data: data, #appAuth: appAuth}),
          returnValue: Future<_i8.HttpClientResponseBody>.value(
              _FakeHttpClientResponseBody())) as _i11
          .Future<_i8.HttpClientResponseBody>);
  @override
  _i11.Future<Map<String, String>> authHeaders(bool? appAuth) =>
      (super.noSuchMethod(Invocation.method(#authHeaders, [appAuth]),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i11.Future<Map<String, String>>);
  @override
  _i11.Future<_i8.HttpClientResponseBody> checkConnectivity(
          {dynamic originalError}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #checkConnectivity, [], {#originalError: originalError}),
              returnValue: Future<_i8.HttpClientResponseBody>.value(
                  _FakeHttpClientResponseBody()))
          as _i11.Future<_i8.HttpClientResponseBody>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i9.StorageService {
  @override
  _i11.Future<_i23.SharedPreferences> get prefs => (super.noSuchMethod(
          Invocation.getter(#prefs),
          returnValue:
              Future<_i23.SharedPreferences>.value(_FakeSharedPreferences()))
      as _i11.Future<_i23.SharedPreferences>);
  @override
  _i11.Future<bool> saveActionToken(int? id, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveActionToken, [id, token]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<bool> deleteActionToken(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteActionToken, [id]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<String?> loadActionToken(int? id) =>
      (super.noSuchMethod(Invocation.method(#loadActionToken, [id]),
          returnValue: Future<String?>.value('')) as _i11.Future<String?>);
  @override
  _i11.Future<bool> saveChatChannel(_i13.ChatChannel? channel) =>
      (super.noSuchMethod(Invocation.method(#saveChatChannel, [channel]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.FutureOr<_i13.ChatChannel?>? loadChatChannel(String? id) =>
      (super.noSuchMethod(Invocation.method(#loadChatChannel, [id]))
          as _i11.FutureOr<_i13.ChatChannel?>?);
  @override
  dynamic markActionIdAsStored(int? id) =>
      super.noSuchMethod(Invocation.method(#markActionIdAsStored, [id]));
  @override
  dynamic unmarkActionIdAsStored(int? id) =>
      super.noSuchMethod(Invocation.method(#unmarkActionIdAsStored, [id]));
  @override
  dynamic markActionIdAsEvaluated(int? id) =>
      super.noSuchMethod(Invocation.method(#markActionIdAsEvaluated, [id]));
  @override
  _i11.Future<List<int>> loadAllStoredActionIds() => (super.noSuchMethod(
      Invocation.method(#loadAllStoredActionIds, []),
      returnValue: Future<List<int>>.value(<int>[])) as _i11.Future<List<int>>);
  @override
  _i11.Future<List<int>> loadAllStoredEvaluations() => (super.noSuchMethod(
      Invocation.method(#loadAllStoredEvaluations, []),
      returnValue: Future<List<int>>.value(<int>[])) as _i11.Future<List<int>>);
  @override
  _i11.Future<bool> saveFilter(_i24.TermineFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#saveFilter, [filter]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<_i24.TermineFilter?> loadFilter() => (super.noSuchMethod(
          Invocation.method(#loadFilter, []),
          returnValue: Future<_i24.TermineFilter?>.value(_FakeTermineFilter()))
      as _i11.Future<_i24.TermineFilter?>);
  @override
  _i11.Future<bool> saveUser(_i12.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<_i12.User?> loadUser() =>
      (super.noSuchMethod(Invocation.method(#loadUser, []),
              returnValue: Future<_i12.User?>.value(_FakeUser()))
          as _i11.Future<_i12.User?>);
  @override
  _i11.Future<String> loadSecret() =>
      (super.noSuchMethod(Invocation.method(#loadSecret, []),
          returnValue: Future<String>.value('')) as _i11.Future<String>);
  @override
  _i11.Future<void> saveSecret(String? secret) =>
      (super.noSuchMethod(Invocation.method(#saveSecret, [secret]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> saveCostumPushToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#saveCostumPushToken, [token]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> setPullMode() =>
      (super.noSuchMethod(Invocation.method(#setPullMode, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> unsetPullMode() =>
      (super.noSuchMethod(Invocation.method(#unsetPullMode, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<bool> isPullMode() =>
      (super.noSuchMethod(Invocation.method(#isPullMode, []),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<void> saveMyKiez(List<String>? kieze) =>
      (super.noSuchMethod(Invocation.method(#saveMyKiez, [kieze]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i11.Future<void>);
  @override
  _i11.Future<List<String>> loadMyKiez() =>
      (super.noSuchMethod(Invocation.method(#loadMyKiez, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i11.Future<List<String>>);
  @override
  _i11.Future<bool> saveNotificationInterval(String? interval) => (super
      .noSuchMethod(Invocation.method(#saveNotificationInterval, [interval]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<String?> loadNotificationInterval() =>
      (super.noSuchMethod(Invocation.method(#loadNotificationInterval, []),
          returnValue: Future<String?>.value('')) as _i11.Future<String?>);
  @override
  _i11.Future<bool> saveContact(String? interval) =>
      (super.noSuchMethod(Invocation.method(#saveContact, [interval]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<String?> loadContact() =>
      (super.noSuchMethod(Invocation.method(#loadContact, []),
          returnValue: Future<String?>.value('')) as _i11.Future<String?>);
  @override
  _i11.Future<bool> saveFAQ(List<_i40.FAQItem>? faq) =>
      (super.noSuchMethod(Invocation.method(#saveFAQ, [faq]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<List<_i40.FAQItem>?> loadFAQ() =>
      (super.noSuchMethod(Invocation.method(#loadFAQ, []),
              returnValue: Future<List<_i40.FAQItem>?>.value(<_i40.FAQItem>[]))
          as _i11.Future<List<_i40.FAQItem>?>);
  @override
  _i11.Future<bool> saveFAQTimestamp(DateTime? timestamp) =>
      (super.noSuchMethod(Invocation.method(#saveFAQTimestamp, [timestamp]),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  _i11.Future<DateTime?> loadFAQTimestamp() =>
      (super.noSuchMethod(Invocation.method(#loadFAQTimestamp, []),
              returnValue: Future<DateTime?>.value(_FakeDateTime()))
          as _i11.Future<DateTime?>);
}

/// A class which mocks [FirebaseReceiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseReceiveService extends _i1.Mock
    implements _i10.FirebaseReceiveService {
  @override
  _i11.Future<String?> get token =>
      (super.noSuchMethod(Invocation.getter(#token),
          returnValue: Future<String?>.value('')) as _i11.Future<String?>);
  @override
  set token(_i11.Future<String?>? _token) =>
      super.noSuchMethod(Invocation.setter(#token, _token),
          returnValueForMissingStub: null);
  @override
  bool get pullMode =>
      (super.noSuchMethod(Invocation.getter(#pullMode), returnValue: false)
          as bool);
  @override
  void subscribe(
          {dynamic Function(_i34.RemoteMessage)? onMessage,
          dynamic Function(_i34.RemoteMessage)? onResume,
          dynamic Function(_i34.RemoteMessage)? onLaunch,
          dynamic Function(_i34.RemoteMessage)? onBackgroundMessage}) =>
      super.noSuchMethod(
          Invocation.method(#subscribe, [], {
            #onMessage: onMessage,
            #onResume: onResume,
            #onLaunch: onLaunch,
            #onBackgroundMessage: onBackgroundMessage
          }),
          returnValueForMissingStub: null);
  @override
  void subscribeToTopics(List<String>? topics) =>
      super.noSuchMethod(Invocation.method(#subscribeToTopics, [topics]),
          returnValueForMissingStub: null);
  @override
  void unsubscribeFromTopics(List<String>? topics) =>
      super.noSuchMethod(Invocation.method(#unsubscribeFromTopics, [topics]),
          returnValueForMissingStub: null);
}
